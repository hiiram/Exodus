var request = require('request'),
    http = require('http'),
    Mongosess = require('../mongosess.js'),
    URL = require('url'),
    KeyGrip = require('keygrip');
        
// Host configs
var HOST = 'localhost',
    PORT = 8080;

// Mongo configs
var MongoOpts = {
  db: 'testdb',
  servers: [{
    host: 'localhost',
    port: 27017
  }],
  expires: 1000 * 60
};

// Mongosess opts
var msOpts = {
  keys: ['secret1'],
  expires: 1000 * 60 * 60 * 24 * 7
}

describe('Mongosess should', function () {

  var quitting = false,
      jar = request.jar(),
      server,
      cookie,
      sid;

  function req (url, cb) {
    request({
      url: 'http://' + HOST + ':' + PORT + url,
      jar: jar,
      json: true
    }, cb);
  }

  function getCookie (name) {

    for (var i = 0; i < jar.cookies.length; i += 1) {
      if (jar.cookies[i].name == name)
        return jar.cookies[i]
    }
  }

  it('setup without complaining.', function (done) {
    Mongosess.connect(MongoOpts, function () {
      server = http.createServer(function (req, res) {
        req.session = res.session = new Mongosess(req, res, msOpts);

        res.send = function (data) {
          res.writeHead(200);
          res.end(JSON.stringify(data));
        }

        var url = URL.parse(req.url, true)

        switch (url.pathname) {
          case '/set':
            return res.session.set(url.query)
              .then(function (result) {
                return res.session.get()
              })
              .then(res.send)
              .done()

          case '/get':
            return res.session.get(url.query.prop)
              .then(function (session) {
                return session || { error: 'Not found.' }
              })
              .then(res.send)
              .done()

          case '/del':
            var params = url.query.prop

            if (!params) {
              res.writeHead(404)
              res.end('Bad request:\n' + JSON.stringify(url))
              return
            }

            if (typeof params === 'string')
              params = [params];

            return res.session.del.apply(res.session, params)
              .then(function (result) {
                return res.session.get()
              })
              .then(function (session) {
                res.send({
                  session: session,
                  deleted: params
                })
              })
              .done()

          case '/expire':
            res.session.expire()
            return res.session.get()
              .then(res.send)
              .done()

          case '/end':
            return res.session.end()
              .then(function (removed) {
                return res.session.get()
              })
              .then(res.send)
              .done()

          default:
            res.writeHead(404)
            res.end(JSON.stringify({
              error: 'not found',
              id: res.session.sid
            }))
        }
      })

      server.on('close', function () {
        if (!quitting)
          throw new Error('Server crashed.');

        Mongosess.disconnect()
      })

      server.listen(PORT, function () {
        expect(server.address()).not.toBe(null)
        done()
      })
    })
  }, 500)

  it('get data.', function (done) {
    // Note: no data is saved to disk until something is set. Until then,
    // Mongosess just spits back the id stored in the cookie.

    req('/get?prop=_id', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body).not.toBe(null);

      sid = body;

      cookie = getCookie('sess')
      expect(cookie).not.toBe(null)
      expect(cookie.value).toEqual(sid)

      // Compare dates.
      var cookieDate = cookie.expires
      cookieDate.setMilliseconds(0) // Ignore millisecond differences.
      var comparison = new Date(Date.now() + msOpts.expires)
      comparison.setMilliseconds(0)
      expect(cookieDate.getTime()).toEqual(comparison.getTime())

      // Check also for signature cookie.
      expect(getCookie('sess.sig')).not.toBe(null)

      done()
    })
  }, 500)

  it('set data.', function (done) {
    req('/set?name=john', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body.name).toEqual('john');
      expect(body._id).toEqual(sid);      

      expect(getCookie('sess')).toEqual(cookie)

      done()
    })
  }, 500)

  it('delete data.', function (done) {
    req('/del?prop=name', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body.session._id).toEqual(sid);
      expect(body.session.name).toEqual(undefined);
      expect(body.deleted).toEqual(['name']);

      expect(getCookie('sess')).toEqual(cookie)

      done()
    })
  }, 500)

  it('end a session.', function (done) {
    req('/end', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body._id).toEqual(sid);

      expect(getCookie('sess')).not.toEqual(cookie)
      cookie = getCookie('sess')
      expect(cookie.value).toEqual('')
      expect(cookie.expires).toEqual(new Date(0))

      done()
    })
  }, 500)

  it('now have a different session.', function (done) {
    req('/get?prop=_id', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body).not.toEqual(sid);

      sid = body;

      cookie = getCookie('sess')
      expect(cookie).not.toBe(null)
      expect(cookie.value).toEqual(sid)
      expect(getCookie('sess.sig')).not.toBe(null)

      var cookieDate = cookie.expires
      cookieDate.setMilliseconds(0)
      var comparison = new Date(Date.now() + msOpts.expires)
      comparison.setMilliseconds(0)
      expect(cookieDate.getTime()).toEqual(comparison.getTime())

      done()
    })
  }, 500)

  it('set multiple fields at once.', function (done) {
    req('/set?name=john&lastname=doe&age=25', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body._id).toEqual(sid);
      expect(body.name).toEqual('john');
      expect(body.lastname).toEqual('doe');
      expect(body.age).toEqual('25');

      expect(getCookie('sess')).toEqual(cookie)

      done()
    })
  }, 500)

  it('get the whole session.', function (done) {
    req('/get', function (err, res, body) {
      if (err) throw err;

      expect(res.statusCode).toEqual(200);
      expect(body._id).toEqual(sid);
      expect(body.name).toEqual('john');
      expect(body.lastname).toEqual('doe');
      expect(body.age).toEqual('25');

      expect(getCookie('sess')).toEqual(cookie)

      done()
    })
  }, 500)

  it('delete multiple fields.', function (done) {
    req('/del?prop=lastname&prop=age', function (err, res, body) {
      if (err) throw err

      expect(res.statusCode).toEqual(200);
      expect(body.session._id).toEqual(sid)
      expect(body.session.name).toEqual('john')
      expect(body.session.lastname).toEqual(undefined)
      expect(body.session.age).toEqual(undefined)
      expect(body.deleted).toEqual(['lastname', 'age'])

      expect(getCookie('sess')).toEqual(cookie)

      done()
    })
  }, 500)

  it('expire a session.', function (done) {
    req('/expire', function (err, res, body) {
      if (err) throw err

      expect(res.statusCode).toEqual(200);
      // Everything stays the same, except cookie expiry date.
      expect(body._id).toEqual(sid)
      expect(body.name).toEqual('john')

      // For some reason, request thinks session cookies have Infinity expiry?!
      expect(getCookie('sess').expires).toEqual(Infinity)

      done()
    })
  }, 500)

  it('exit gracefully.', function (done) {

    quitting = true;

    server.close()

    expect(server.address()).toBe(null)

    done()
  }, 500)
})
